<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ include file="..\..\Common.tt" #>
<#@ output extension=".cs" #>
<#
    string xmlPath = Host.ResolvePath(@"..\Blueprint.xml");
    XElement xml = XElement.Load(xmlPath);
#>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using Microsoft.VisualStudio.TestTools.UnitTesting;

using Moq;

using SampleHttpApplication.BusinessLogicComponents.Interface.<#= (string)xml.Attribute("name") #>.<#= (string)xml.Element("operation").Attribute("name") #>;
using SampleHttpApplication.DataAccessComponents.Interface;
<# foreach (XElement dataAccessComponent in xml.Descendants("dataAccessComponent")) { #>
using SampleHttpApplication.DataAccessComponents.Interface.<#= (string)dataAccessComponent.Attribute("name") #>;
<# } #>

namespace SampleHttpApplication.BusinessLogicComponents.Tests.Scheduling.<#= (string)xml.Element("operation").Attribute("name") #>
{
    /// <summary>
    /// Represents the <#= (string)xml.Element("operation").Attribute("name") #> operation tests.
    /// </summary>
    [TestClass]
    public class <#= (string)xml.Element("operation").Attribute("name") #>OperationTests
    {
<# if (xml.Descendants("responseElement").Count() == 0) { #>
        /// <summary>
        /// Should succeed.
        /// </summary>
        [TestMethod]
        public void ShouldSucceed()
        {
            // Build the test harness.
            <#= (string)xml.Attribute("name") #>BusinessLogicComponentTestHarness testHarness = new <#= (string)xml.Attribute("name") #>BusinessLogicComponentTestHarness();

            // Build the <#= (string)xml.Element("operation").Attribute("name") #> business request.
            <#= (string)xml.Element("operation").Attribute("name") #>BusinessRequest <#= CamelCased((string)xml.Element("operation").Attribute("name")) #>BusinessRequest = new <#= (string)xml.Element("operation").Attribute("name") #>BusinessRequest();

            // Invoke the <#= (string)xml.Element("operation").Attribute("name") #> business operation.
            <#= (string)xml.Element("operation").Attribute("name") #>BusinessResponse <#= CamelCased((string)xml.Element("operation").Attribute("name")) #>BusinessResponse = testHarness.<#= (string)xml.Attribute("name") #>BusinessLogicComponent.<#= (string)xml.Element("operation").Attribute("name") #>(testHarness.MockedDatabaseConnection, <#= CamelCased((string)xml.Element("operation").Attribute("name")) #>BusinessRequest).Result;

            // Verify the mocked components.
            testHarness.VerifyMockedComponents();

            // Validate the business response.
            Assert.IsNotNull(<#= CamelCased((string)xml.Element("operation").Attribute("name")) #>BusinessResponse);
        }

<# } #>
<# foreach (XElement responseElement in xml.Descendants("responseElement").Where(responseElement => (string)responseElement.Attribute("count") == "single")) { #>
        /// <summary>
        /// Should return the <#= (string)responseElement.Attribute("singularName") #> response element.
        /// </summary>
        [TestMethod]
        public void ShouldReturn<#= (string)responseElement.Attribute("singularName") #>ResponseElement()
        {
            // Build the test harness.
            <#= (string)xml.Attribute("name") #>BusinessLogicComponentTestHarness testHarness = new <#= (string)xml.Attribute("name") #>BusinessLogicComponentTestHarness();

            // Build the <#= (string)xml.Element("operation").Attribute("name") #> business request.
            <#= (string)xml.Element("operation").Attribute("name") #>BusinessRequest <#= CamelCased((string)xml.Element("operation").Attribute("name")) #>BusinessRequest = new <#= (string)xml.Element("operation").Attribute("name") #>BusinessRequest();

            // Invoke the <#= (string)xml.Element("operation").Attribute("name") #> business operation.
            <#= (string)xml.Element("operation").Attribute("name") #>BusinessResponse <#= CamelCased((string)xml.Element("operation").Attribute("name")) #>BusinessResponse = testHarness.<#= (string)xml.Attribute("name") #>BusinessLogicComponent.<#= (string)xml.Element("operation").Attribute("name") #>(testHarness.MockedDatabaseConnection, <#= CamelCased((string)xml.Element("operation").Attribute("name")) #>BusinessRequest).Result;

            // Verify the mocked components.
            testHarness.VerifyMockedComponents();

            // Validate the <#= (string)responseElement.Attribute("singularName") #> business response element.
            Assert.IsNotNull(<#= CamelCased((string)xml.Element("operation").Attribute("name")) #>BusinessResponse);
            Assert.IsNotNull(<#= CamelCased((string)xml.Element("operation").Attribute("name")) #>BusinessResponse.<#= (string)responseElement.Attribute("singularName") #>);
        }

<# } #>
<# foreach (XElement responseElement in xml.Descendants("responseElement").Where(responseElement => (string)responseElement.Attribute("count") == "multiple")) { #>
        /// <summary>
        /// Should return zero <#= (string)responseElement.Attribute("singularName") #> response elements.
        /// </summary>
        [TestMethod]
        public void ShouldReturnZero<#= (string)responseElement.Attribute("pluralName") #>ResponseElements()
        {
            // Build the test harness.
            <#= (string)xml.Attribute("name") #>BusinessLogicComponentTestHarness testHarness = new <#= (string)xml.Attribute("name") #>BusinessLogicComponentTestHarness();

            // Build the <#= (string)xml.Element("operation").Attribute("name") #> business request.
            <#= (string)xml.Element("operation").Attribute("name") #>BusinessRequest <#= CamelCased((string)xml.Element("operation").Attribute("name")) #>BusinessRequest = new <#= (string)xml.Element("operation").Attribute("name") #>BusinessRequest();

            // Invoke the <#= (string)xml.Element("operation").Attribute("name") #> business operation.
            <#= (string)xml.Element("operation").Attribute("name") #>BusinessResponse <#= CamelCased((string)xml.Element("operation").Attribute("name")) #>BusinessResponse = testHarness.<#= (string)xml.Attribute("name") #>BusinessLogicComponent.<#= (string)xml.Element("operation").Attribute("name") #>(testHarness.MockedDatabaseConnection, <#= CamelCased((string)xml.Element("operation").Attribute("name")) #>BusinessRequest).Result;

            // Verify the mocked components.
            testHarness.VerifyMockedComponents();

            // Validate the <#= (string)responseElement.Attribute("singularName") #> business response elements count.
            Assert.IsNotNull(<#= CamelCased((string)xml.Element("operation").Attribute("name")) #>BusinessResponse);
            Assert.IsNotNull(<#= CamelCased((string)xml.Element("operation").Attribute("name")) #>BusinessResponse.<#= (string)responseElement.Attribute("pluralName") #>);
            Assert.AreEqual(0, <#= CamelCased((string)xml.Element("operation").Attribute("name")) #>BusinessResponse.<#= (string)responseElement.Attribute("pluralName") #>.Length);
        }

        /// <summary>
        /// Should return one <#= (string)responseElement.Attribute("singularName") #> response element.
        /// </summary>
        [TestMethod]
        public void ShouldReturnOne<#= (string)responseElement.Attribute("singularName") #>ResponseElement()
        {
            // Build the test harness.
            <#= (string)xml.Attribute("name") #>BusinessLogicComponentTestHarness testHarness = new <#= (string)xml.Attribute("name") #>BusinessLogicComponentTestHarness();

            // Build the <#= (string)xml.Element("operation").Attribute("name") #> business request.
            <#= (string)xml.Element("operation").Attribute("name") #>BusinessRequest <#= CamelCased((string)xml.Element("operation").Attribute("name")) #>BusinessRequest = new <#= (string)xml.Element("operation").Attribute("name") #>BusinessRequest();

            // Invoke the <#= (string)xml.Element("operation").Attribute("name") #> business operation.
            <#= (string)xml.Element("operation").Attribute("name") #>BusinessResponse <#= CamelCased((string)xml.Element("operation").Attribute("name")) #>BusinessResponse = testHarness.<#= (string)xml.Attribute("name") #>BusinessLogicComponent.<#= (string)xml.Element("operation").Attribute("name") #>(testHarness.MockedDatabaseConnection, <#= CamelCased((string)xml.Element("operation").Attribute("name")) #>BusinessRequest).Result;

            // Verify the mocked components.
            testHarness.VerifyMockedComponents();

            // Validate the <#= (string)responseElement.Attribute("singularName") #> business response elements count.
            Assert.IsNotNull(<#= CamelCased((string)xml.Element("operation").Attribute("name")) #>BusinessResponse);
            Assert.IsNotNull(<#= CamelCased((string)xml.Element("operation").Attribute("name")) #>BusinessResponse.<#= (string)responseElement.Attribute("pluralName") #>);
            Assert.AreEqual(1, <#= CamelCased((string)xml.Element("operation").Attribute("name")) #>BusinessResponse.<#= (string)responseElement.Attribute("pluralName") #>.Length);

            // Validate the <#= (string)responseElement.Attribute("singularName") #> business response element.
            Assert.IsNotNull(<#= CamelCased((string)xml.Element("operation").Attribute("name")) #>BusinessResponse.<#= (string)responseElement.Attribute("pluralName") #>[0]);
        }

        /// <summary>
        /// Should return multiple <#= (string)responseElement.Attribute("singularName") #> response elements.
        /// </summary>
        [TestMethod]
        public void ShouldReturnMultiple<#= (string)responseElement.Attribute("pluralName") #>ResponseElements()
        {
            // Build the test harness.
            <#= (string)xml.Attribute("name") #>BusinessLogicComponentTestHarness testHarness = new <#= (string)xml.Attribute("name") #>BusinessLogicComponentTestHarness();

            // Build the <#= (string)xml.Element("operation").Attribute("name") #> business request.
            <#= (string)xml.Element("operation").Attribute("name") #>BusinessRequest <#= CamelCased((string)xml.Element("operation").Attribute("name")) #>BusinessRequest = new <#= (string)xml.Element("operation").Attribute("name") #>BusinessRequest();

            // Invoke the <#= (string)xml.Element("operation").Attribute("name") #> business operation.
            <#= (string)xml.Element("operation").Attribute("name") #>BusinessResponse <#= CamelCased((string)xml.Element("operation").Attribute("name")) #>BusinessResponse = testHarness.<#= (string)xml.Attribute("name") #>BusinessLogicComponent.<#= (string)xml.Element("operation").Attribute("name") #>(testHarness.MockedDatabaseConnection, <#= CamelCased((string)xml.Element("operation").Attribute("name")) #>BusinessRequest).Result;

            // Verify the mocked components.
            testHarness.VerifyMockedComponents();

            // Validate the <#= (string)responseElement.Attribute("singularName") #> business response elements count.
            Assert.IsNotNull(<#= CamelCased((string)xml.Element("operation").Attribute("name")) #>BusinessResponse);
            Assert.IsNotNull(<#= CamelCased((string)xml.Element("operation").Attribute("name")) #>BusinessResponse.<#= (string)responseElement.Attribute("pluralName") #>);
            Assert.AreEqual(3, <#= CamelCased((string)xml.Element("operation").Attribute("name")) #>BusinessResponse.<#= (string)responseElement.Attribute("pluralName") #>.Length);

            // Validate the first <#= (string)responseElement.Attribute("singularName") #> business response element.
            Assert.IsNotNull(<#= CamelCased((string)xml.Element("operation").Attribute("name")) #>BusinessResponse.<#= (string)responseElement.Attribute("pluralName") #>[0]);

            // Validate the second <#= (string)responseElement.Attribute("singularName") #> business response element.
            Assert.IsNotNull(<#= CamelCased((string)xml.Element("operation").Attribute("name")) #>BusinessResponse.<#= (string)responseElement.Attribute("pluralName") #>[1]);

            // Validate the third <#= (string)responseElement.Attribute("singularName") #> business response element.
            Assert.IsNotNull(<#= CamelCased((string)xml.Element("operation").Attribute("name")) #>BusinessResponse.<#= (string)responseElement.Attribute("pluralName") #>[2]);
        }

<# } #>
<# foreach (XElement error in xml.Descendants("errors").Elements("error")) { #>
        /// <summary>
        /// Should throw the <#= (string)error.Attribute("code") #> error code.
        /// </summary>
        [TestMethod]
        public void ShouldThrow<#= (string)error.Attribute("code") #>ErrorCode()
        {
            // Build the test harness.
            <#= (string)xml.Attribute("name") #>BusinessLogicComponentTestHarness testHarness = new <#= (string)xml.Attribute("name") #>BusinessLogicComponentTestHarness();

            // Build the <#= (string)xml.Element("operation").Attribute("name") #> business request.
            <#= (string)xml.Element("operation").Attribute("name") #>BusinessRequest <#= CamelCased((string)xml.Element("operation").Attribute("name")) #>BusinessRequest = new <#= (string)xml.Element("operation").Attribute("name") #>BusinessRequest();

            try
            {
                // Invoke the <#= (string)xml.Element("operation").Attribute("name") #> business operation.
                testHarness.<#= (string)xml.Attribute("name") #>BusinessLogicComponent.<#= (string)xml.Element("operation").Attribute("name") #>(testHarness.MockedDatabaseConnection, <#= CamelCased((string)xml.Element("operation").Attribute("name")) #>BusinessRequest).Wait();

                // Validate an exception was thrown.
                Assert.Fail();
            }
            catch (AggregateException ex)
            {
                // Verify the mocked components.
                testHarness.VerifyMockedComponents();

                // Validate a <#= (string)xml.Element("operation").Attribute("name") #> business exception was thrown.
                <#= (string)xml.Element("operation").Attribute("name") #>BusinessException <#= (string)xml.Element("operation").Attribute("name") #>BusinessException = ex.InnerExceptions[0] as <#= (string)xml.Element("operation").Attribute("name") #>BusinessException;
                Assert.IsNotNull(<#= (string)xml.Element("operation").Attribute("name") #>BusinessException);
                Assert.AreEqual("SchedulingBusinessLogicComponent.<#= (string)xml.Element("operation").Attribute("name") #>() has thrown a <#= (string)xml.Element("operation").Attribute("name") #> business exception. See the Errors property for details.", <#= (string)xml.Element("operation").Attribute("name") #>BusinessException.Message);

                // Validate the <#= (string)xml.Element("operation").Attribute("name") #> business exception contains the <#= (string)error.Attribute("code") #> error code.
                Assert.IsNotNull(<#= (string)xml.Element("operation").Attribute("name") #>BusinessException.Errors);
                Assert.AreEqual(1, <#= (string)xml.Element("operation").Attribute("name") #>BusinessException.Errors.Length);
                Assert.AreEqual(<#= (string)xml.Element("operation").Attribute("name") #>BusinessException.ErrorCodes.<#= (string)error.Attribute("code") #>, <#= (string)xml.Element("operation").Attribute("name") #>BusinessException.Errors[0].ErrorCode);
                Assert.AreEqual(, <#= (string)xml.Element("operation").Attribute("name") #>BusinessException.Errors[0].ErroneousValue);
            }
        }

<# } #>
    }
}
