<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ include file="..\..\Common.tt" #>
<#@ output extension=".txt" #>
<#
    string xmlPath = Host.ResolvePath(@"..\Blueprint.xml");
    XElement xml = XElement.Load(xmlPath);
#>

    // Build the business request.
    <#= (string)xml.Element("operation").Attribute("name") #>BusinessRequest businessRequest = new <#= (string)xml.Element("operation").Attribute("name") #>BusinessRequest();

<# Stack<string> parentRequestElements = new Stack<string>(new string[] { "businessRequest" }); #>
<# ForEachSeparatedRecursive(xml.Descendants("request").Elements("requestElement"), (requestElement) => { #>
<#     if ((string)requestElement.Attribute("count") == "single") { #>
    // Build the <#= (string)requestElement.Attribute("singularName") #> business request element.
    <#= (string)xml.Element("operation").Attribute("name") #>BusinessRequest.<#= (string)requestElement.Attribute("singularName") #>BusinessRequestElement <#= CamelCased((string)requestElement.Attribute("singularName")) #>BusinessRequestElement = new <#= (string)xml.Element("operation").Attribute("name") #>BusinessRequest.<#= (string)requestElement.Attribute("singularName") #>BusinessRequestElement();
<#         foreach (XElement property in requestElement.Elements("property")) { #>
    <#= CamelCased((string)requestElement.Attribute("singularName")) #>BusinessRequestElement.<#= (string)property.Attribute("name") #> = ;
<#         } #>
    <#= parentRequestElements.Peek() #>.<#= (string)requestElement.Attribute("singularName") #> = <#= CamelCased((string)requestElement.Attribute("singularName")) #>BusinessRequestElement;
<#         parentRequestElements.Push(CamelCased((string)requestElement.Attribute("singularName")) + "BusinessRequestElement"); #>
<#     } else if ((string)requestElement.Attribute("count") == "multiple") { #>
    // Build the <#= (string)requestElement.Attribute("singularName") #> business request elements.
    List<<#= (string)xml.Element("operation").Attribute("name") #>BusinessRequest.<#= (string)requestElement.Attribute("singularName") #>BusinessRequestElement> <#= CamelCased((string)requestElement.Attribute("singularName")) #>BusinessRequestElements = new List<<#= (string)xml.Element("operation").Attribute("name") #>BusinessRequest.<#= (string)requestElement.Attribute("singularName") #>BusinessRequestElement>();
    foreach ( in )
    {
        // Build the <#= (string)requestElement.Attribute("singularName") #> business request element.
        <#= (string)xml.Element("operation").Attribute("name") #>BusinessRequest.<#= (string)requestElement.Attribute("singularName") #>BusinessRequestElement <#= CamelCased((string)requestElement.Attribute("singularName")) #>BusinessRequestElement = new <#= (string)xml.Element("operation").Attribute("name") #>BusinessRequest.<#= (string)requestElement.Attribute("singularName") #>BusinessRequestElement();
<#         foreach (XElement property in requestElement.Elements("property")) { #>
        <#= CamelCased((string)requestElement.Attribute("singularName")) #>BusinessRequestElement.<#= (string)property.Attribute("name") #> = ;
<#         } #>
        <#= CamelCased((string)requestElement.Attribute("singularName")) #>BusinessRequestElements.Add(<#= CamelCased((string)requestElement.Attribute("singularName")) #>BusinessRequestElement);
<#         parentRequestElements.Push(CamelCased((string)requestElement.Attribute("singularName")) + "BusinessRequestElements"); #>
<#         PushIndent("    "); #>
<#     } #>
<#     if (requestElement.Elements("requestElement").Any()) { #>

<#     } #>
<# }, (requestElement) => requestElement.Elements("requestElement"), (requestElement) => { #>
<#     parentRequestElements.Pop(); #>
<#     if ((string)requestElement.Attribute("count") == "multiple") { #>
<#         PopIndent(); #>
    }

    // Set the <#= (string)requestElement.Attribute("singularName") #> business request elements.
    <#= parentRequestElements.Peek() #>.<#= (string)requestElement.Attribute("pluralName") #> = <#= CamelCased((string)requestElement.Attribute("singularName")) #>BusinessRequestElements.ToArray();
<#     } #>
<# }, () => { #>

<# }, false); #>

    // Invoke the <#= (string)xml.Element("operation").Attribute("name") #> business operation.
    <#= (string)xml.Element("operation").Attribute("name") #>BusinessResponse <#= CamelCased((string)xml.Element("operation").Attribute("name")) #>BusinessResponse = await this.<#= CamelCased((string)xml.Attribute("name")) #>BusinessLogicComponent.<#= (string)xml.Element("operation").Attribute("name") #>(databaseConnection, <#= CamelCased((string)xml.Element("operation").Attribute("name")) #>BusinessRequest);
