<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ include file="..\..\Common.tt" #>
<#@ output extension=".cs" #>
<#
    string xmlPath = Host.ResolvePath(@"..\Blueprint.xml");
    XElement xml = XElement.Load(xmlPath);
#>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using SampleHttpApplication.BusinessLogicComponents.Interface.<#= (string)xml.Attribute("name") #>.<#= (string)xml.Element("operation").Attribute("name") #>;
using SampleHttpApplication.Infrastructure.Code.DataAnnotations;

namespace SampleHttpApplication.BusinessLogicComponents.Code.<#= (string)xml.Attribute("name") #>
{
    /// <summary>
    /// Represents the <#= (string)xml.Attribute("name") #> business logic component.
    /// </summary>
    public partial class <#= (string)xml.Attribute("name") #>BusinessLogicComponent
    {
        /// <summary>
        /// Validates the specified <#= (string)xml.Element("operation").Attribute("name") #> business request property.
        /// </summary>
        private void Validate<#= (string)xml.Element("operation").Attribute("name") #>RequestProperty(object businessRequestElement, string propertyName, object propertyValue, <#= (string)xml.Element("operation").Attribute("name") #>BusinessException.ErrorCodes errorCode, List<<#= (string)xml.Element("operation").Attribute("name") #>BusinessException.ErrorBusinessExceptionElement> errorBusinessExceptionElements)
        {
            // Make sure the property is invalid.
            if (ValidatorHelper.ValidateProperty(businessRequestElement, propertyName, propertyValue))
            {
                return;
            }

            // Build an Error business exception element.
            <#= (string)xml.Element("operation").Attribute("name") #>BusinessException.ErrorBusinessExceptionElement errorBusinessExceptionElement = new <#= (string)xml.Element("operation").Attribute("name") #>BusinessException.ErrorBusinessExceptionElement();
            errorBusinessExceptionElement.ErrorCode = errorCode;
            errorBusinessExceptionElement.ErroneousValue = propertyValue;

            // Add the Error business exception element to the list.
            errorBusinessExceptionElements.Add(errorBusinessExceptionElement);
        }

        /// <summary>
        /// Builds a <#= (string)xml.Element("operation").Attribute("name") #> business exception.
        /// </summary>
        private <#= (string)xml.Element("operation").Attribute("name") #>BusinessException Build<#= (string)xml.Element("operation").Attribute("name") #>BusinessException(<#= (string)xml.Element("operation").Attribute("name") #>BusinessException.ErrorBusinessExceptionElement[] errorBusinessExceptionElements)
        {
            // Build the business exception.
            <#= (string)xml.Element("operation").Attribute("name") #>BusinessException businessException = new <#= (string)xml.Element("operation").Attribute("name") #>BusinessException();
            businessException.ErrorMessage = String.Format("<#= (string)xml.Attribute("name") #>BusinessLogicComponent.<#= (string)xml.Element("operation").Attribute("name") #>() has thrown a <#= (string)xml.Element("operation").Attribute("name") #> business exception. See the Errors property for details.");
            businessException.Errors = errorBusinessExceptionElements;

            // Return the business exception.
            return businessException;
        }

        /// <summary>
        /// Builds a <#= (string)xml.Element("operation").Attribute("name") #> business exception.
        /// </summary>
        private <#= (string)xml.Element("operation").Attribute("name") #>BusinessException Build<#= (string)xml.Element("operation").Attribute("name") #>BusinessException(<#= (string)xml.Element("operation").Attribute("name") #>BusinessException.ErrorCodes errorCode, object erroneousValue)
        {
            // Build an Error business exception element.
            <#= (string)xml.Element("operation").Attribute("name") #>BusinessException.ErrorBusinessExceptionElement errorBusinessExceptionElement = new <#= (string)xml.Element("operation").Attribute("name") #>BusinessException.ErrorBusinessExceptionElement();
            errorBusinessExceptionElement.ErrorCode = errorCode;
            errorBusinessExceptionElement.ErroneousValue = erroneousValue;

            // Build the business exception.
            <#= (string)xml.Element("operation").Attribute("name") #>BusinessException businessException = this.Build<#= (string)xml.Element("operation").Attribute("name") #>BusinessException(new <#= (string)xml.Element("operation").Attribute("name") #>BusinessException.ErrorBusinessExceptionElement[] { errorBusinessExceptionElement });

            // Return the business exception.
            return businessException;
        }
    }
}
