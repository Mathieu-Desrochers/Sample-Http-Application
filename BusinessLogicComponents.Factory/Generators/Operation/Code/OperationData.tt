<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ include file="..\..\Common.tt" #>
<#@ output extension=".cs" #>
<#
    string xmlPath = Host.ResolvePath(@"..\Blueprint.xml");
    XElement xml = XElement.Load(xmlPath);
#>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

<# foreach (XElement dataAccessComponent in xml.Descendants("dataAccessComponent")) { #>
using SampleHttpApplication.DataAccessComponents.Interface.<#= (string)dataAccessComponent.Attribute("name") #>;
<# } #>

namespace SampleHttpApplication.BusinessLogicComponents.Code.<#= (string)xml.Attribute("name") #>
{
    /// <summary>
    /// Represents a <#= (string)xml.Element("operation").Attribute("name") #> operation data.
    /// </summary>
    public class <#= (string)xml.Element("operation").Attribute("name") #>OperationData
    {
<# if (xml.Descendants("dataAccessComponent").Any()) { #>
        /// <summary>
        /// The data rows.
        /// </summary>
<# foreach (XElement dataAccessComponent in xml.Descendants("dataAccessComponent")) { #>
<# if ((string)dataAccessComponent.Attribute("operation") == "read") { #>
<# if ((string)dataAccessComponent.Attribute("results") == "single") { #>
        public <#= (string)dataAccessComponent.Attribute("name") #>DataRow <#= (string)dataAccessComponent.Attribute("name") #>DataRow;
<# } else { #>
        public <#= (string)dataAccessComponent.Attribute("name") #>DataRow[] <#= (string)dataAccessComponent.Attribute("name") #>DataRows;
<# } #>
<# } else if ((string)dataAccessComponent.Attribute("operation") == "create") { #>
<# if (!xml.Descendants("dataAccessComponent").Any(otherDataAccessComponent => (string)otherDataAccessComponent.Attribute("name") == (string)dataAccessComponent.Attribute("name") && (string)otherDataAccessComponent.Attribute("operation") == "read" && (string)otherDataAccessComponent.Attribute("results") == "single")) { #>
        public <#= (string)dataAccessComponent.Attribute("name") #>DataRow <#= (string)dataAccessComponent.Attribute("name") #>DataRow;
<# } #>
<# } #>
<# } #>
<# } #>
<# if (xml.Descendants("dataAccessComponent").Any(dataAccessComponent => (string)dataAccessComponent.Attribute("lookup") == "true")) { #>

        /// <summary>
        /// The data lookups.
        /// </summary>
<# foreach (XElement dataAccessComponent in xml.Descendants("dataAccessComponent").Where(dataAccessComponent => (string)dataAccessComponent.Attribute("lookup") == "true")) { #>
        public ILookup<int, <#= (string)dataAccessComponent.Attribute("name") #>DataRow> <#= (string)dataAccessComponent.Attribute("name") #>DataLookup;
<# } #>
<# } #>
    }
}
