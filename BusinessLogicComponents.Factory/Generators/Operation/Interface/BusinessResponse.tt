<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ include file="..\..\Common.tt" #>
<#@ output extension=".cs" #>
<#
    string xmlPath = Host.ResolvePath(@"..\Blueprint.xml");
    XElement xml = XElement.Load(xmlPath);
#>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SampleHttpApplication.BusinessLogicComponents.Interface.<#= (string)xml.Attribute("name") #>
{
    /// <summary>
    /// Represents a <#= (string)xml.Element("operation").Attribute("name") #> business response.
    /// </summary>
    public class <#= (string)xml.Element("operation").Attribute("name") #>BusinessResponse
    {
<# ForEachSeparatedRecursive(xml.Descendants("response").Elements("responseElement"), (responseElement) => { #>
        /// <summary>
        /// <#= (string)responseElement.Element("summary") #>
        /// </summary>
<#     if ((string)responseElement.Attribute("count") == "single") { #>
        public <#= (string)responseElement.Attribute("singularName") #>BusinessResponseElement <#= (string)responseElement.Attribute("singularName") #>;
<#     } else { #>
        public <#= (string)responseElement.Attribute("singularName") #>BusinessResponseElement[] <#= (string)responseElement.Attribute("pluralName") #>;
<#     } #>
        public class <#= (string)responseElement.Attribute("singularName") #>BusinessResponseElement
        {
<#     ForEachSeparated(responseElement.Elements("property"), (property) => { #>
            /// <summary>
            /// Gets or sets the <#= (string)property.Attribute("name") #>.
            /// </summary>
            public <#= (string)property.Attribute("type") #> <#= (string)property.Attribute("name") #> { get; set; }
<#     }, () => { #>

<#     }); #>
<#     if (responseElement.Elements("property").Any() && responseElement.Elements("responseElement").Any()) { #>

<#     } #>
<# }, (responseElement) => responseElement.Elements("responseElement"), (responseElement) => { #>
        }
<# }, () => { #>

<# }, true); #>
    }
}
